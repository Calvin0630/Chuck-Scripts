#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 28, 2019 03:25:28 PM EDT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import OwO_support

def onClose() :
    print('bye')
    OwO_support.chuck.close()
    root.destroy()

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    OwO_support.set_Tk_var()
    top = Toplevel1 (root)
    OwO_support.init(root, top)
    root.protocol("WM_DELETE_WINDOW", onClose)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    OwO_support.set_Tk_var()
    top = Toplevel1 (w)
    OwO_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("591x540+731+134")
        top.title("New Toplevel")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#ffffff")
        top.configure(highlightcolor="black")

        self.visualizerCanvas = tk.Canvas(top)
        self.visualizerCanvas.place(relx=0.017, rely=0.019, relheight=0.376
                , relwidth=0.986)
        self.visualizerCanvas.configure(background="#d9d9d9")
        self.visualizerCanvas.configure(borderwidth="2")
        self.visualizerCanvas.configure(highlightbackground="#d9d9d9")
        self.visualizerCanvas.configure(highlightcolor="black")
        self.visualizerCanvas.configure(insertbackground="black")
        self.visualizerCanvas.configure(relief='ridge')
        self.visualizerCanvas.configure(selectbackground="#c4c4c4")
        self.visualizerCanvas.configure(selectforeground="black")
        self.visualizerCanvas.configure(width=583)

        self.images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook" 

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.main_NoteBook = ttk.Notebook(top)
        self.main_NoteBook.place(relx=0.017, rely=0.407, relheight=0.594
                , relwidth=0.988)
        self.main_NoteBook.configure(width=300)
        self.main_NoteBook.configure(style=PNOTEBOOK)
        self.main_NoteBook_t0 = tk.Frame(self.main_NoteBook)
        self.main_NoteBook.add(self.main_NoteBook_t0, padding=3)
        self.main_NoteBook.tab(0, text="Synthesizer", compound="none"
                ,underline="-1", )
        self.main_NoteBook_t0.configure(background="#d9d9d9")
        self.main_NoteBook_t0.configure(highlightbackground="#d9d9d9")
        self.main_NoteBook_t0.configure(highlightcolor="black")
        self.main_NoteBook_t1 = tk.Frame(self.main_NoteBook)
        self.main_NoteBook.add(self.main_NoteBook_t1, padding=3)
        self.main_NoteBook.tab(1, text="Sampler", compound="none", underline="-1"
                ,)
        self.main_NoteBook_t1.configure(background="#d9d9d9")
        self.main_NoteBook_t1.configure(highlightbackground="#d9d9d9")
        self.main_NoteBook_t1.configure(highlightcolor="black")

        self.Scale1 = tk.Scale(self.main_NoteBook_t0, from_=1.0, to=0.0)
        self.Scale1.place(relx=0.052, rely=0.034, relwidth=0.0, relheight=0.366
                , width=35, bordermode='ignore')
        self.Scale1.configure(activebackground="#ececec")
        self.Scale1.configure(background="#d9d9d9")
        self.Scale1.configure(font="TkTextFont")
        self.Scale1.configure(foreground="#000000")
        self.Scale1.configure(highlightbackground="#d9d9d9")
        self.Scale1.configure(highlightcolor="black")
        self.Scale1.configure(troughcolor="#ff0000")
        self.Scale1.configure(variable=OwO_support.synth_Volume)

        self.Label1 = tk.Label(self.main_NoteBook_t0)
        self.Label1.place(relx=0.034, rely=0.414, height=26, width=62)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Volume''')

        self.Scale2 = tk.Scale(self.main_NoteBook_t0, from_=1.0, to=0.0)
        self.Scale2.place(relx=0.017, rely=0.517, relwidth=0.0, relheight=0.366
                , width=35, bordermode='ignore')
        self.Scale2.configure(activebackground="#ececec")
        self.Scale2.configure(background="#d9d9d9")
        self.Scale2.configure(font="TkTextFont")
        self.Scale2.configure(foreground="#000000")
        self.Scale2.configure(highlightbackground="#d9d9d9")
        self.Scale2.configure(highlightcolor="black")
        self.Scale2.configure(troughcolor="#ffb300")
        self.Scale2.configure(variable=OwO_support.synth_Attack)

        self.Scale3 = tk.Scale(self.main_NoteBook_t0, from_=1.0, to=0.0)
        self.Scale3.place(relx=0.103, rely=0.517, relwidth=0.0, relheight=0.366
                , width=35, bordermode='ignore')
        self.Scale3.configure(activebackground="#ececec")
        self.Scale3.configure(background="#d9d9d9")
        self.Scale3.configure(font="TkTextFont")
        self.Scale3.configure(foreground="#000000")
        self.Scale3.configure(highlightbackground="#d9d9d9")
        self.Scale3.configure(highlightcolor="black")
        self.Scale3.configure(troughcolor="#bbff00")
        self.Scale3.configure(variable=OwO_support.synth_Delay)

        self.Scale4 = tk.Scale(self.main_NoteBook_t0, from_=1.0, to=0.0)
        self.Scale4.place(relx=0.207, rely=0.517, relwidth=0.0, relheight=0.366
                , width=35, bordermode='ignore')
        self.Scale4.configure(activebackground="#ececec")
        self.Scale4.configure(background="#d9d9d9")
        self.Scale4.configure(font="TkTextFont")
        self.Scale4.configure(foreground="#000000")
        self.Scale4.configure(highlightbackground="#d9d9d9")
        self.Scale4.configure(highlightcolor="black")
        self.Scale4.configure(troughcolor="#00ccff")
        self.Scale4.configure(variable=OwO_support.synth_Sustain)

        self.Scale5 = tk.Scale(self.main_NoteBook_t0, from_=1.0, to=0.0)
        self.Scale5.place(relx=0.31, rely=0.517, relwidth=0.0, relheight=0.366
                , width=35, bordermode='ignore')
        self.Scale5.configure(activebackground="#ececec")
        self.Scale5.configure(background="#d9d9d9")
        self.Scale5.configure(font="TkTextFont")
        self.Scale5.configure(foreground="#000000")
        self.Scale5.configure(highlightbackground="#d9d9d9")
        self.Scale5.configure(highlightcolor="black")
        self.Scale5.configure(troughcolor="#d400ff")
        self.Scale5.configure(variable=OwO_support.synth_Release)

        self.Label2 = tk.Label(self.main_NoteBook_t0)
        self.Label2.place(relx=0.017, rely=0.897, height=26, width=48)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Attack''')

        self.Label2 = tk.Label(self.main_NoteBook_t0)
        self.Label2.place(relx=0.207, rely=0.897, height=26, width=62)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Sustain''')

        self.Label2 = tk.Label(self.main_NoteBook_t0)
        self.Label2.place(relx=0.121, rely=0.897, height=26, width=42)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Delay''')

        self.Label2 = tk.Label(self.main_NoteBook_t0)
        self.Label2.place(relx=0.31, rely=0.897, height=26, width=62)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Release''')

        self.effects_Frame = tk.Frame(self.main_NoteBook_t0)
        self.effects_Frame.place(relx=0.552, rely=0.034, relheight=0.914
                , relwidth=0.422)
        self.effects_Frame.configure(relief='groove')
        self.effects_Frame.configure(borderwidth="2")
        self.effects_Frame.configure(relief='groove')
        self.effects_Frame.configure(background="#d9d9d9")
        self.effects_Frame.configure(highlightbackground="#d9d9d9")
        self.effects_Frame.configure(highlightcolor="black")
        self.effects_Frame.configure(width=245)

        self.effects_ListBox = tk.Listbox(self.main_NoteBook_t0)
        self.effects_ListBox.place(relx=0.345, rely=0.034, relheight=0.372
                , relwidth=0.179)
        self.effects_ListBox.configure(background="white")
        self.effects_ListBox.configure(disabledforeground="#a3a3a3")
        self.effects_ListBox.configure(font="TkFixedFont")
        self.effects_ListBox.configure(foreground="#000000")
        self.effects_ListBox.configure(justify='center')
        self.effects_ListBox.configure(selectmode='single')
        self.effects_ListBox.configure(width=104)
        self.effects_ListBox.configure(listvariable=OwO_support.activeEffectPanel)
        #bind the function
        self.effects_ListBox.bind('<<ListboxSelect>>',OwO_support.CurSelet)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.effects_ListBox, tooltip_font, '''UwU''', delay=0.5)
        self.main_NoteBook.bind('<Button-1>',_button_press)
        self.main_NoteBook.bind('<ButtonRelease-1>',_button_release)
        self.main_NoteBook.bind('<Motion>',_mouse_over)

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except Exception as TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive 
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================
# How to use this class...
#   Copy the file tooltip.py into your working directory
#   import this into the _support python file created by Page
#   from tooltip import ToolTip
#   in the _support python file, create a function to attach each tooltip
#   to the widgets desired. Example:
#   ToolTip(self.widgetname, font, msg='Exit program', follow=False, delay=0.5)
# ======================================================
from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except Exception as e:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





